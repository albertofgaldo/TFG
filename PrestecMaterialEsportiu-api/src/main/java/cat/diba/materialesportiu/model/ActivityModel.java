/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package cat.diba.materialesportiu.model;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;

import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.model.BaseModel;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.GroupedModel;
import com.liferay.portal.kernel.model.LocalizedModel;
import com.liferay.portal.kernel.model.ShardedModel;
import com.liferay.portal.kernel.service.ServiceContext;

import java.io.Serializable;

import java.util.Date;
import java.util.Locale;
import java.util.Map;

/**
 * The base model interface for the Activity service. Represents a row in the &quot;PME_Activity&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link cat.diba.materialesportiu.model.impl.ActivityModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link cat.diba.materialesportiu.model.impl.ActivityImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see Activity
 * @see cat.diba.materialesportiu.model.impl.ActivityImpl
 * @see cat.diba.materialesportiu.model.impl.ActivityModelImpl
 * @generated
 */
@ProviderType
public interface ActivityModel extends BaseModel<Activity>, GroupedModel,
	LocalizedModel, ShardedModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a activity model instance should use the {@link Activity} interface instead.
	 */

	/**
	 * Returns the primary key of this activity.
	 *
	 * @return the primary key of this activity
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this activity.
	 *
	 * @param primaryKey the primary key of this activity
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the activity ID of this activity.
	 *
	 * @return the activity ID of this activity
	 */
	public long getActivityId();

	/**
	 * Sets the activity ID of this activity.
	 *
	 * @param activityId the activity ID of this activity
	 */
	public void setActivityId(long activityId);

	/**
	 * Returns the name of this activity.
	 *
	 * @return the name of this activity
	 */
	public String getName();

	/**
	 * Returns the localized name of this activity in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized name of this activity
	 */
	@AutoEscape
	public String getName(Locale locale);

	/**
	 * Returns the localized name of this activity in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized name of this activity. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getName(Locale locale, boolean useDefault);

	/**
	 * Returns the localized name of this activity in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized name of this activity
	 */
	@AutoEscape
	public String getName(String languageId);

	/**
	 * Returns the localized name of this activity in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized name of this activity
	 */
	@AutoEscape
	public String getName(String languageId, boolean useDefault);

	@AutoEscape
	public String getNameCurrentLanguageId();

	@AutoEscape
	public String getNameCurrentValue();

	/**
	 * Returns a map of the locales and localized names of this activity.
	 *
	 * @return the locales and localized names of this activity
	 */
	public Map<Locale, String> getNameMap();

	/**
	 * Sets the name of this activity.
	 *
	 * @param name the name of this activity
	 */
	public void setName(String name);

	/**
	 * Sets the localized name of this activity in the language.
	 *
	 * @param name the localized name of this activity
	 * @param locale the locale of the language
	 */
	public void setName(String name, Locale locale);

	/**
	 * Sets the localized name of this activity in the language, and sets the default locale.
	 *
	 * @param name the localized name of this activity
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setName(String name, Locale locale, Locale defaultLocale);

	public void setNameCurrentLanguageId(String languageId);

	/**
	 * Sets the localized names of this activity from the map of locales and localized names.
	 *
	 * @param nameMap the locales and localized names of this activity
	 */
	public void setNameMap(Map<Locale, String> nameMap);

	/**
	 * Sets the localized names of this activity from the map of locales and localized names, and sets the default locale.
	 *
	 * @param nameMap the locales and localized names of this activity
	 * @param defaultLocale the default locale
	 */
	public void setNameMap(Map<Locale, String> nameMap, Locale defaultLocale);

	/**
	 * Returns the description of this activity.
	 *
	 * @return the description of this activity
	 */
	public String getDescription();

	/**
	 * Returns the localized description of this activity in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized description of this activity
	 */
	@AutoEscape
	public String getDescription(Locale locale);

	/**
	 * Returns the localized description of this activity in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized description of this activity. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getDescription(Locale locale, boolean useDefault);

	/**
	 * Returns the localized description of this activity in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized description of this activity
	 */
	@AutoEscape
	public String getDescription(String languageId);

	/**
	 * Returns the localized description of this activity in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized description of this activity
	 */
	@AutoEscape
	public String getDescription(String languageId, boolean useDefault);

	@AutoEscape
	public String getDescriptionCurrentLanguageId();

	@AutoEscape
	public String getDescriptionCurrentValue();

	/**
	 * Returns a map of the locales and localized descriptions of this activity.
	 *
	 * @return the locales and localized descriptions of this activity
	 */
	public Map<Locale, String> getDescriptionMap();

	/**
	 * Sets the description of this activity.
	 *
	 * @param description the description of this activity
	 */
	public void setDescription(String description);

	/**
	 * Sets the localized description of this activity in the language.
	 *
	 * @param description the localized description of this activity
	 * @param locale the locale of the language
	 */
	public void setDescription(String description, Locale locale);

	/**
	 * Sets the localized description of this activity in the language, and sets the default locale.
	 *
	 * @param description the localized description of this activity
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setDescription(String description, Locale locale,
		Locale defaultLocale);

	public void setDescriptionCurrentLanguageId(String languageId);

	/**
	 * Sets the localized descriptions of this activity from the map of locales and localized descriptions.
	 *
	 * @param descriptionMap the locales and localized descriptions of this activity
	 */
	public void setDescriptionMap(Map<Locale, String> descriptionMap);

	/**
	 * Sets the localized descriptions of this activity from the map of locales and localized descriptions, and sets the default locale.
	 *
	 * @param descriptionMap the locales and localized descriptions of this activity
	 * @param defaultLocale the default locale
	 */
	public void setDescriptionMap(Map<Locale, String> descriptionMap,
		Locale defaultLocale);

	/**
	 * Returns the age of this activity.
	 *
	 * @return the age of this activity
	 */
	public int getAge();

	/**
	 * Sets the age of this activity.
	 *
	 * @param age the age of this activity
	 */
	public void setAge(int age);

	/**
	 * Returns the min participants of this activity.
	 *
	 * @return the min participants of this activity
	 */
	public int getMinParticipants();

	/**
	 * Sets the min participants of this activity.
	 *
	 * @param minParticipants the min participants of this activity
	 */
	public void setMinParticipants(int minParticipants);

	/**
	 * Returns the max participants of this activity.
	 *
	 * @return the max participants of this activity
	 */
	public int getMaxParticipants();

	/**
	 * Sets the max participants of this activity.
	 *
	 * @param maxParticipants the max participants of this activity
	 */
	public void setMaxParticipants(int maxParticipants);

	/**
	 * Returns the usage rules of this activity.
	 *
	 * @return the usage rules of this activity
	 */
	public String getUsageRules();

	/**
	 * Returns the localized usage rules of this activity in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized usage rules of this activity
	 */
	@AutoEscape
	public String getUsageRules(Locale locale);

	/**
	 * Returns the localized usage rules of this activity in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized usage rules of this activity. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getUsageRules(Locale locale, boolean useDefault);

	/**
	 * Returns the localized usage rules of this activity in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized usage rules of this activity
	 */
	@AutoEscape
	public String getUsageRules(String languageId);

	/**
	 * Returns the localized usage rules of this activity in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized usage rules of this activity
	 */
	@AutoEscape
	public String getUsageRules(String languageId, boolean useDefault);

	@AutoEscape
	public String getUsageRulesCurrentLanguageId();

	@AutoEscape
	public String getUsageRulesCurrentValue();

	/**
	 * Returns a map of the locales and localized usage ruleses of this activity.
	 *
	 * @return the locales and localized usage ruleses of this activity
	 */
	public Map<Locale, String> getUsageRulesMap();

	/**
	 * Sets the usage rules of this activity.
	 *
	 * @param usageRules the usage rules of this activity
	 */
	public void setUsageRules(String usageRules);

	/**
	 * Sets the localized usage rules of this activity in the language.
	 *
	 * @param usageRules the localized usage rules of this activity
	 * @param locale the locale of the language
	 */
	public void setUsageRules(String usageRules, Locale locale);

	/**
	 * Sets the localized usage rules of this activity in the language, and sets the default locale.
	 *
	 * @param usageRules the localized usage rules of this activity
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setUsageRules(String usageRules, Locale locale,
		Locale defaultLocale);

	public void setUsageRulesCurrentLanguageId(String languageId);

	/**
	 * Sets the localized usage ruleses of this activity from the map of locales and localized usage ruleses.
	 *
	 * @param usageRulesMap the locales and localized usage ruleses of this activity
	 */
	public void setUsageRulesMap(Map<Locale, String> usageRulesMap);

	/**
	 * Sets the localized usage ruleses of this activity from the map of locales and localized usage ruleses, and sets the default locale.
	 *
	 * @param usageRulesMap the locales and localized usage ruleses of this activity
	 * @param defaultLocale the default locale
	 */
	public void setUsageRulesMap(Map<Locale, String> usageRulesMap,
		Locale defaultLocale);

	/**
	 * Returns the loan conditions of this activity.
	 *
	 * @return the loan conditions of this activity
	 */
	public String getLoanConditions();

	/**
	 * Returns the localized loan conditions of this activity in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized loan conditions of this activity
	 */
	@AutoEscape
	public String getLoanConditions(Locale locale);

	/**
	 * Returns the localized loan conditions of this activity in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized loan conditions of this activity. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getLoanConditions(Locale locale, boolean useDefault);

	/**
	 * Returns the localized loan conditions of this activity in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized loan conditions of this activity
	 */
	@AutoEscape
	public String getLoanConditions(String languageId);

	/**
	 * Returns the localized loan conditions of this activity in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized loan conditions of this activity
	 */
	@AutoEscape
	public String getLoanConditions(String languageId, boolean useDefault);

	@AutoEscape
	public String getLoanConditionsCurrentLanguageId();

	@AutoEscape
	public String getLoanConditionsCurrentValue();

	/**
	 * Returns a map of the locales and localized loan conditionses of this activity.
	 *
	 * @return the locales and localized loan conditionses of this activity
	 */
	public Map<Locale, String> getLoanConditionsMap();

	/**
	 * Sets the loan conditions of this activity.
	 *
	 * @param loanConditions the loan conditions of this activity
	 */
	public void setLoanConditions(String loanConditions);

	/**
	 * Sets the localized loan conditions of this activity in the language.
	 *
	 * @param loanConditions the localized loan conditions of this activity
	 * @param locale the locale of the language
	 */
	public void setLoanConditions(String loanConditions, Locale locale);

	/**
	 * Sets the localized loan conditions of this activity in the language, and sets the default locale.
	 *
	 * @param loanConditions the localized loan conditions of this activity
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setLoanConditions(String loanConditions, Locale locale,
		Locale defaultLocale);

	public void setLoanConditionsCurrentLanguageId(String languageId);

	/**
	 * Sets the localized loan conditionses of this activity from the map of locales and localized loan conditionses.
	 *
	 * @param loanConditionsMap the locales and localized loan conditionses of this activity
	 */
	public void setLoanConditionsMap(Map<Locale, String> loanConditionsMap);

	/**
	 * Sets the localized loan conditionses of this activity from the map of locales and localized loan conditionses, and sets the default locale.
	 *
	 * @param loanConditionsMap the locales and localized loan conditionses of this activity
	 * @param defaultLocale the default locale
	 */
	public void setLoanConditionsMap(Map<Locale, String> loanConditionsMap,
		Locale defaultLocale);

	/**
	 * Returns the titulation is required of this activity.
	 *
	 * @return the titulation is required of this activity
	 */
	public boolean getTitulationIsRequired();

	/**
	 * Returns <code>true</code> if this activity is titulation is required.
	 *
	 * @return <code>true</code> if this activity is titulation is required; <code>false</code> otherwise
	 */
	public boolean isTitulationIsRequired();

	/**
	 * Sets whether this activity is titulation is required.
	 *
	 * @param titulationIsRequired the titulation is required of this activity
	 */
	public void setTitulationIsRequired(boolean titulationIsRequired);

	/**
	 * Returns the total stock of this activity.
	 *
	 * @return the total stock of this activity
	 */
	public int getTotalStock();

	/**
	 * Sets the total stock of this activity.
	 *
	 * @param totalStock the total stock of this activity
	 */
	public void setTotalStock(int totalStock);

	/**
	 * Returns the available stock of this activity.
	 *
	 * @return the available stock of this activity
	 */
	public int getAvailableStock();

	/**
	 * Sets the available stock of this activity.
	 *
	 * @param availableStock the available stock of this activity
	 */
	public void setAvailableStock(int availableStock);

	/**
	 * Returns the days before loan of this activity.
	 *
	 * @return the days before loan of this activity
	 */
	public int getDaysBeforeLoan();

	/**
	 * Sets the days before loan of this activity.
	 *
	 * @param daysBeforeLoan the days before loan of this activity
	 */
	public void setDaysBeforeLoan(int daysBeforeLoan);

	/**
	 * Returns the days booking of this activity.
	 *
	 * @return the days booking of this activity
	 */
	public int getDaysBooking();

	/**
	 * Sets the days booking of this activity.
	 *
	 * @param daysBooking the days booking of this activity
	 */
	public void setDaysBooking(int daysBooking);

	/**
	 * Returns the days after loan of this activity.
	 *
	 * @return the days after loan of this activity
	 */
	public int getDaysAfterLoan();

	/**
	 * Sets the days after loan of this activity.
	 *
	 * @param daysAfterLoan the days after loan of this activity
	 */
	public void setDaysAfterLoan(int daysAfterLoan);

	/**
	 * Returns the group ID of this activity.
	 *
	 * @return the group ID of this activity
	 */
	@Override
	public long getGroupId();

	/**
	 * Sets the group ID of this activity.
	 *
	 * @param groupId the group ID of this activity
	 */
	@Override
	public void setGroupId(long groupId);

	/**
	 * Returns the company ID of this activity.
	 *
	 * @return the company ID of this activity
	 */
	@Override
	public long getCompanyId();

	/**
	 * Sets the company ID of this activity.
	 *
	 * @param companyId the company ID of this activity
	 */
	@Override
	public void setCompanyId(long companyId);

	/**
	 * Returns the user ID of this activity.
	 *
	 * @return the user ID of this activity
	 */
	@Override
	public long getUserId();

	/**
	 * Sets the user ID of this activity.
	 *
	 * @param userId the user ID of this activity
	 */
	@Override
	public void setUserId(long userId);

	/**
	 * Returns the user uuid of this activity.
	 *
	 * @return the user uuid of this activity
	 */
	@Override
	public String getUserUuid();

	/**
	 * Sets the user uuid of this activity.
	 *
	 * @param userUuid the user uuid of this activity
	 */
	@Override
	public void setUserUuid(String userUuid);

	/**
	 * Returns the user name of this activity.
	 *
	 * @return the user name of this activity
	 */
	@AutoEscape
	@Override
	public String getUserName();

	/**
	 * Sets the user name of this activity.
	 *
	 * @param userName the user name of this activity
	 */
	@Override
	public void setUserName(String userName);

	/**
	 * Returns the create date of this activity.
	 *
	 * @return the create date of this activity
	 */
	@Override
	public Date getCreateDate();

	/**
	 * Sets the create date of this activity.
	 *
	 * @param createDate the create date of this activity
	 */
	@Override
	public void setCreateDate(Date createDate);

	/**
	 * Returns the modified date of this activity.
	 *
	 * @return the modified date of this activity
	 */
	@Override
	public Date getModifiedDate();

	/**
	 * Sets the modified date of this activity.
	 *
	 * @param modifiedDate the modified date of this activity
	 */
	@Override
	public void setModifiedDate(Date modifiedDate);

	@Override
	public boolean isNew();

	@Override
	public void setNew(boolean n);

	@Override
	public boolean isCachedModel();

	@Override
	public void setCachedModel(boolean cachedModel);

	@Override
	public boolean isEscapedModel();

	@Override
	public Serializable getPrimaryKeyObj();

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj);

	@Override
	public ExpandoBridge getExpandoBridge();

	@Override
	public void setExpandoBridgeAttributes(BaseModel<?> baseModel);

	@Override
	public void setExpandoBridgeAttributes(ExpandoBridge expandoBridge);

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext);

	@Override
	public String[] getAvailableLanguageIds();

	@Override
	public String getDefaultLanguageId();

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException;

	@Override
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException;

	@Override
	public Object clone();

	@Override
	public int compareTo(Activity activity);

	@Override
	public int hashCode();

	@Override
	public CacheModel<Activity> toCacheModel();

	@Override
	public Activity toEscapedModel();

	@Override
	public Activity toUnescapedModel();

	@Override
	public String toString();

	@Override
	public String toXmlString();
}