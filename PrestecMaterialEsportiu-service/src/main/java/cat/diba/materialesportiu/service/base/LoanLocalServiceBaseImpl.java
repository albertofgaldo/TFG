/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package cat.diba.materialesportiu.service.base;

import aQute.bnd.annotation.ProviderType;

import cat.diba.materialesportiu.model.Loan;
import cat.diba.materialesportiu.service.LoanLocalService;
import cat.diba.materialesportiu.service.persistence.ActivityDependsOnPersistence;
import cat.diba.materialesportiu.service.persistence.ActivityFinder;
import cat.diba.materialesportiu.service.persistence.ActivityPersistence;
import cat.diba.materialesportiu.service.persistence.LoanActivityPersistence;
import cat.diba.materialesportiu.service.persistence.LoanFinder;
import cat.diba.materialesportiu.service.persistence.LoanPersistence;
import cat.diba.materialesportiu.service.persistence.LocalEntityPersistence;
import cat.diba.materialesportiu.service.persistence.MaintenancePersistence;
import cat.diba.materialesportiu.service.persistence.MaterialPersistence;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.transaction.Transactional;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.spring.extender.service.ServiceReference;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the loan local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link cat.diba.materialesportiu.service.impl.LoanLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see cat.diba.materialesportiu.service.impl.LoanLocalServiceImpl
 * @see cat.diba.materialesportiu.service.LoanLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class LoanLocalServiceBaseImpl extends BaseLocalServiceImpl
	implements LoanLocalService, IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link cat.diba.materialesportiu.service.LoanLocalServiceUtil} to access the loan local service.
	 */

	/**
	 * Adds the loan to the database. Also notifies the appropriate model listeners.
	 *
	 * @param loan the loan
	 * @return the loan that was added
	 * @throws SystemException
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public Loan addLoan(Loan loan) throws SystemException {
		loan.setNew(true);

		return loanPersistence.update(loan);
	}

	/**
	 * Creates a new loan with the primary key. Does not add the loan to the database.
	 *
	 * @param loanId the primary key for the new loan
	 * @return the new loan
	 */
	@Override
	@Transactional(enabled = false)
	public Loan createLoan(long loanId) {
		return loanPersistence.create(loanId);
	}

	/**
	 * Deletes the loan with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param loanId the primary key of the loan
	 * @return the loan that was removed
	 * @throws PortalException if a loan with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public Loan deleteLoan(long loanId) throws PortalException {
		return loanPersistence.remove(loanId);
	}

	/**
	 * Deletes the loan from the database. Also notifies the appropriate model listeners.
	 *
	 * @param loan the loan
	 * @return the loan that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public Loan deleteLoan(Loan loan) {
		return loanPersistence.remove(loan);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(Loan.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return loanPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link cat.diba.materialesportiu.model.impl.LoanModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return loanPersistence.findWithDynamicQuery(dynamicQuery, start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link cat.diba.materialesportiu.model.impl.LoanModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return loanPersistence.findWithDynamicQuery(dynamicQuery, start, end,
			orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return loanPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return loanPersistence.countWithDynamicQuery(dynamicQuery, projection);
	}

	@Override
	public Loan fetchLoan(long loanId) {
		return loanPersistence.fetchByPrimaryKey(loanId);
	}

	/**
	 * Returns the loan with the primary key.
	 *
	 * @param loanId the primary key of the loan
	 * @return the loan
	 * @throws PortalException if a loan with the primary key could not be found
	 */
	@Override
	public Loan getLoan(long loanId) throws PortalException {
		return loanPersistence.findByPrimaryKey(loanId);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(loanLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(Loan.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("loanId");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(loanLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(Loan.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName("loanId");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(loanLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(Loan.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("loanId");
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return loanLocalService.deleteLoan((Loan)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return loanPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the loans.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link cat.diba.materialesportiu.model.impl.LoanModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of loans
	 * @param end the upper bound of the range of loans (not inclusive)
	 * @return the range of loans
	 */
	@Override
	public List<Loan> getLoans(int start, int end) {
		return loanPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of loans.
	 *
	 * @return the number of loans
	 */
	@Override
	public int getLoansCount() {
		return loanPersistence.countAll();
	}

	/**
	 * Updates the loan in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param loan the loan
	 * @return the loan that was updated
	 * @throws SystemException
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public Loan updateLoan(Loan loan) throws SystemException {
		return loanPersistence.update(loan);
	}

	/**
	 * Returns the activity local service.
	 *
	 * @return the activity local service
	 */
	public cat.diba.materialesportiu.service.ActivityLocalService getActivityLocalService() {
		return activityLocalService;
	}

	/**
	 * Sets the activity local service.
	 *
	 * @param activityLocalService the activity local service
	 */
	public void setActivityLocalService(
		cat.diba.materialesportiu.service.ActivityLocalService activityLocalService) {
		this.activityLocalService = activityLocalService;
	}

	/**
	 * Returns the activity persistence.
	 *
	 * @return the activity persistence
	 */
	public ActivityPersistence getActivityPersistence() {
		return activityPersistence;
	}

	/**
	 * Sets the activity persistence.
	 *
	 * @param activityPersistence the activity persistence
	 */
	public void setActivityPersistence(ActivityPersistence activityPersistence) {
		this.activityPersistence = activityPersistence;
	}

	/**
	 * Returns the activity finder.
	 *
	 * @return the activity finder
	 */
	public ActivityFinder getActivityFinder() {
		return activityFinder;
	}

	/**
	 * Sets the activity finder.
	 *
	 * @param activityFinder the activity finder
	 */
	public void setActivityFinder(ActivityFinder activityFinder) {
		this.activityFinder = activityFinder;
	}

	/**
	 * Returns the activity depends on local service.
	 *
	 * @return the activity depends on local service
	 */
	public cat.diba.materialesportiu.service.ActivityDependsOnLocalService getActivityDependsOnLocalService() {
		return activityDependsOnLocalService;
	}

	/**
	 * Sets the activity depends on local service.
	 *
	 * @param activityDependsOnLocalService the activity depends on local service
	 */
	public void setActivityDependsOnLocalService(
		cat.diba.materialesportiu.service.ActivityDependsOnLocalService activityDependsOnLocalService) {
		this.activityDependsOnLocalService = activityDependsOnLocalService;
	}

	/**
	 * Returns the activity depends on persistence.
	 *
	 * @return the activity depends on persistence
	 */
	public ActivityDependsOnPersistence getActivityDependsOnPersistence() {
		return activityDependsOnPersistence;
	}

	/**
	 * Sets the activity depends on persistence.
	 *
	 * @param activityDependsOnPersistence the activity depends on persistence
	 */
	public void setActivityDependsOnPersistence(
		ActivityDependsOnPersistence activityDependsOnPersistence) {
		this.activityDependsOnPersistence = activityDependsOnPersistence;
	}

	/**
	 * Returns the loan local service.
	 *
	 * @return the loan local service
	 */
	public LoanLocalService getLoanLocalService() {
		return loanLocalService;
	}

	/**
	 * Sets the loan local service.
	 *
	 * @param loanLocalService the loan local service
	 */
	public void setLoanLocalService(LoanLocalService loanLocalService) {
		this.loanLocalService = loanLocalService;
	}

	/**
	 * Returns the loan persistence.
	 *
	 * @return the loan persistence
	 */
	public LoanPersistence getLoanPersistence() {
		return loanPersistence;
	}

	/**
	 * Sets the loan persistence.
	 *
	 * @param loanPersistence the loan persistence
	 */
	public void setLoanPersistence(LoanPersistence loanPersistence) {
		this.loanPersistence = loanPersistence;
	}

	/**
	 * Returns the loan finder.
	 *
	 * @return the loan finder
	 */
	public LoanFinder getLoanFinder() {
		return loanFinder;
	}

	/**
	 * Sets the loan finder.
	 *
	 * @param loanFinder the loan finder
	 */
	public void setLoanFinder(LoanFinder loanFinder) {
		this.loanFinder = loanFinder;
	}

	/**
	 * Returns the loan activity local service.
	 *
	 * @return the loan activity local service
	 */
	public cat.diba.materialesportiu.service.LoanActivityLocalService getLoanActivityLocalService() {
		return loanActivityLocalService;
	}

	/**
	 * Sets the loan activity local service.
	 *
	 * @param loanActivityLocalService the loan activity local service
	 */
	public void setLoanActivityLocalService(
		cat.diba.materialesportiu.service.LoanActivityLocalService loanActivityLocalService) {
		this.loanActivityLocalService = loanActivityLocalService;
	}

	/**
	 * Returns the loan activity persistence.
	 *
	 * @return the loan activity persistence
	 */
	public LoanActivityPersistence getLoanActivityPersistence() {
		return loanActivityPersistence;
	}

	/**
	 * Sets the loan activity persistence.
	 *
	 * @param loanActivityPersistence the loan activity persistence
	 */
	public void setLoanActivityPersistence(
		LoanActivityPersistence loanActivityPersistence) {
		this.loanActivityPersistence = loanActivityPersistence;
	}

	/**
	 * Returns the local entity local service.
	 *
	 * @return the local entity local service
	 */
	public cat.diba.materialesportiu.service.LocalEntityLocalService getLocalEntityLocalService() {
		return localEntityLocalService;
	}

	/**
	 * Sets the local entity local service.
	 *
	 * @param localEntityLocalService the local entity local service
	 */
	public void setLocalEntityLocalService(
		cat.diba.materialesportiu.service.LocalEntityLocalService localEntityLocalService) {
		this.localEntityLocalService = localEntityLocalService;
	}

	/**
	 * Returns the local entity persistence.
	 *
	 * @return the local entity persistence
	 */
	public LocalEntityPersistence getLocalEntityPersistence() {
		return localEntityPersistence;
	}

	/**
	 * Sets the local entity persistence.
	 *
	 * @param localEntityPersistence the local entity persistence
	 */
	public void setLocalEntityPersistence(
		LocalEntityPersistence localEntityPersistence) {
		this.localEntityPersistence = localEntityPersistence;
	}

	/**
	 * Returns the maintenance local service.
	 *
	 * @return the maintenance local service
	 */
	public cat.diba.materialesportiu.service.MaintenanceLocalService getMaintenanceLocalService() {
		return maintenanceLocalService;
	}

	/**
	 * Sets the maintenance local service.
	 *
	 * @param maintenanceLocalService the maintenance local service
	 */
	public void setMaintenanceLocalService(
		cat.diba.materialesportiu.service.MaintenanceLocalService maintenanceLocalService) {
		this.maintenanceLocalService = maintenanceLocalService;
	}

	/**
	 * Returns the maintenance persistence.
	 *
	 * @return the maintenance persistence
	 */
	public MaintenancePersistence getMaintenancePersistence() {
		return maintenancePersistence;
	}

	/**
	 * Sets the maintenance persistence.
	 *
	 * @param maintenancePersistence the maintenance persistence
	 */
	public void setMaintenancePersistence(
		MaintenancePersistence maintenancePersistence) {
		this.maintenancePersistence = maintenancePersistence;
	}

	/**
	 * Returns the material local service.
	 *
	 * @return the material local service
	 */
	public cat.diba.materialesportiu.service.MaterialLocalService getMaterialLocalService() {
		return materialLocalService;
	}

	/**
	 * Sets the material local service.
	 *
	 * @param materialLocalService the material local service
	 */
	public void setMaterialLocalService(
		cat.diba.materialesportiu.service.MaterialLocalService materialLocalService) {
		this.materialLocalService = materialLocalService;
	}

	/**
	 * Returns the material persistence.
	 *
	 * @return the material persistence
	 */
	public MaterialPersistence getMaterialPersistence() {
		return materialPersistence;
	}

	/**
	 * Sets the material persistence.
	 *
	 * @param materialPersistence the material persistence
	 */
	public void setMaterialPersistence(MaterialPersistence materialPersistence) {
		this.materialPersistence = materialPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register("cat.diba.materialesportiu.model.Loan",
			loanLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"cat.diba.materialesportiu.model.Loan");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return LoanLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return Loan.class;
	}

	protected String getModelClassName() {
		return Loan.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = loanPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = cat.diba.materialesportiu.service.ActivityLocalService.class)
	protected cat.diba.materialesportiu.service.ActivityLocalService activityLocalService;
	@BeanReference(type = ActivityPersistence.class)
	protected ActivityPersistence activityPersistence;
	@BeanReference(type = ActivityFinder.class)
	protected ActivityFinder activityFinder;
	@BeanReference(type = cat.diba.materialesportiu.service.ActivityDependsOnLocalService.class)
	protected cat.diba.materialesportiu.service.ActivityDependsOnLocalService activityDependsOnLocalService;
	@BeanReference(type = ActivityDependsOnPersistence.class)
	protected ActivityDependsOnPersistence activityDependsOnPersistence;
	@BeanReference(type = LoanLocalService.class)
	protected LoanLocalService loanLocalService;
	@BeanReference(type = LoanPersistence.class)
	protected LoanPersistence loanPersistence;
	@BeanReference(type = LoanFinder.class)
	protected LoanFinder loanFinder;
	@BeanReference(type = cat.diba.materialesportiu.service.LoanActivityLocalService.class)
	protected cat.diba.materialesportiu.service.LoanActivityLocalService loanActivityLocalService;
	@BeanReference(type = LoanActivityPersistence.class)
	protected LoanActivityPersistence loanActivityPersistence;
	@BeanReference(type = cat.diba.materialesportiu.service.LocalEntityLocalService.class)
	protected cat.diba.materialesportiu.service.LocalEntityLocalService localEntityLocalService;
	@BeanReference(type = LocalEntityPersistence.class)
	protected LocalEntityPersistence localEntityPersistence;
	@BeanReference(type = cat.diba.materialesportiu.service.MaintenanceLocalService.class)
	protected cat.diba.materialesportiu.service.MaintenanceLocalService maintenanceLocalService;
	@BeanReference(type = MaintenancePersistence.class)
	protected MaintenancePersistence maintenancePersistence;
	@BeanReference(type = cat.diba.materialesportiu.service.MaterialLocalService.class)
	protected cat.diba.materialesportiu.service.MaterialLocalService materialLocalService;
	@BeanReference(type = MaterialPersistence.class)
	protected MaterialPersistence materialPersistence;
	@ServiceReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.ClassNameLocalService.class)
	protected com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService;
	@ServiceReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@ServiceReference(type = com.liferay.portal.kernel.service.ResourceLocalService.class)
	protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry persistedModelLocalServiceRegistry;
}