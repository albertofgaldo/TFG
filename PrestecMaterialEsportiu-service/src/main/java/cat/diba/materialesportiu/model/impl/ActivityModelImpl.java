/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package cat.diba.materialesportiu.model.impl;

import aQute.bnd.annotation.ProviderType;

import cat.diba.materialesportiu.model.Activity;
import cat.diba.materialesportiu.model.ActivityModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.Validator;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

/**
 * The base model implementation for the Activity service. Represents a row in the &quot;PME_Activity&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ActivityModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ActivityImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ActivityImpl
 * @see Activity
 * @see ActivityModel
 * @generated
 */
@ProviderType
public class ActivityModelImpl extends BaseModelImpl<Activity>
	implements ActivityModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a activity model instance should use the {@link Activity} interface instead.
	 */
	public static final String TABLE_NAME = "PME_Activity";
	public static final Object[][] TABLE_COLUMNS = {
			{ "activityId", Types.BIGINT },
			{ "name", Types.VARCHAR },
			{ "description", Types.VARCHAR },
			{ "age", Types.INTEGER },
			{ "minParticipants", Types.INTEGER },
			{ "maxParticipants", Types.INTEGER },
			{ "usageRules", Types.VARCHAR },
			{ "loanConditions", Types.VARCHAR },
			{ "titulationIsRequired", Types.BOOLEAN },
			{ "totalStock", Types.INTEGER },
			{ "availableStock", Types.INTEGER },
			{ "daysBeforeLoan", Types.INTEGER },
			{ "daysBooking", Types.INTEGER },
			{ "daysAfterLoan", Types.INTEGER },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("activityId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("age", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("minParticipants", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("maxParticipants", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("usageRules", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("loanConditions", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("titulationIsRequired", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("totalStock", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("availableStock", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("daysBeforeLoan", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("daysBooking", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("daysAfterLoan", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE = "create table PME_Activity (activityId LONG not null primary key,name STRING null,description STRING null,age INTEGER,minParticipants INTEGER,maxParticipants INTEGER,usageRules STRING null,loanConditions STRING null,titulationIsRequired BOOLEAN,totalStock INTEGER,availableStock INTEGER,daysBeforeLoan INTEGER,daysBooking INTEGER,daysAfterLoan INTEGER,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table PME_Activity";
	public static final String ORDER_BY_JPQL = " ORDER BY activity.name ASC";
	public static final String ORDER_BY_SQL = " ORDER BY PME_Activity.name ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(cat.diba.materialesportiu.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.cat.diba.materialesportiu.model.Activity"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(cat.diba.materialesportiu.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.cat.diba.materialesportiu.model.Activity"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(cat.diba.materialesportiu.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.cat.diba.materialesportiu.model.Activity"),
			true);
	public static final long ACTIVITYID_COLUMN_BITMASK = 1L;
	public static final long AVAILABLESTOCK_COLUMN_BITMASK = 2L;
	public static final long COMPANYID_COLUMN_BITMASK = 4L;
	public static final long GROUPID_COLUMN_BITMASK = 8L;
	public static final long NAME_COLUMN_BITMASK = 16L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(cat.diba.materialesportiu.service.util.ServiceProps.get(
				"lock.expiration.time.cat.diba.materialesportiu.model.Activity"));

	public ActivityModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _activityId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setActivityId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _activityId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Activity.class;
	}

	@Override
	public String getModelClassName() {
		return Activity.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("activityId", getActivityId());
		attributes.put("name", getName());
		attributes.put("description", getDescription());
		attributes.put("age", getAge());
		attributes.put("minParticipants", getMinParticipants());
		attributes.put("maxParticipants", getMaxParticipants());
		attributes.put("usageRules", getUsageRules());
		attributes.put("loanConditions", getLoanConditions());
		attributes.put("titulationIsRequired", isTitulationIsRequired());
		attributes.put("totalStock", getTotalStock());
		attributes.put("availableStock", getAvailableStock());
		attributes.put("daysBeforeLoan", getDaysBeforeLoan());
		attributes.put("daysBooking", getDaysBooking());
		attributes.put("daysAfterLoan", getDaysAfterLoan());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long activityId = (Long)attributes.get("activityId");

		if (activityId != null) {
			setActivityId(activityId);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		Integer age = (Integer)attributes.get("age");

		if (age != null) {
			setAge(age);
		}

		Integer minParticipants = (Integer)attributes.get("minParticipants");

		if (minParticipants != null) {
			setMinParticipants(minParticipants);
		}

		Integer maxParticipants = (Integer)attributes.get("maxParticipants");

		if (maxParticipants != null) {
			setMaxParticipants(maxParticipants);
		}

		String usageRules = (String)attributes.get("usageRules");

		if (usageRules != null) {
			setUsageRules(usageRules);
		}

		String loanConditions = (String)attributes.get("loanConditions");

		if (loanConditions != null) {
			setLoanConditions(loanConditions);
		}

		Boolean titulationIsRequired = (Boolean)attributes.get(
				"titulationIsRequired");

		if (titulationIsRequired != null) {
			setTitulationIsRequired(titulationIsRequired);
		}

		Integer totalStock = (Integer)attributes.get("totalStock");

		if (totalStock != null) {
			setTotalStock(totalStock);
		}

		Integer availableStock = (Integer)attributes.get("availableStock");

		if (availableStock != null) {
			setAvailableStock(availableStock);
		}

		Integer daysBeforeLoan = (Integer)attributes.get("daysBeforeLoan");

		if (daysBeforeLoan != null) {
			setDaysBeforeLoan(daysBeforeLoan);
		}

		Integer daysBooking = (Integer)attributes.get("daysBooking");

		if (daysBooking != null) {
			setDaysBooking(daysBooking);
		}

		Integer daysAfterLoan = (Integer)attributes.get("daysAfterLoan");

		if (daysAfterLoan != null) {
			setDaysAfterLoan(daysAfterLoan);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}
	}

	@Override
	public long getActivityId() {
		return _activityId;
	}

	@Override
	public void setActivityId(long activityId) {
		_columnBitmask |= ACTIVITYID_COLUMN_BITMASK;

		if (!_setOriginalActivityId) {
			_setOriginalActivityId = true;

			_originalActivityId = _activityId;
		}

		_activityId = activityId;
	}

	public long getOriginalActivityId() {
		return _originalActivityId;
	}

	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public String getName(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getName(languageId);
	}

	@Override
	public String getName(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getName(languageId, useDefault);
	}

	@Override
	public String getName(String languageId) {
		return LocalizationUtil.getLocalization(getName(), languageId);
	}

	@Override
	public String getName(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getName(), languageId,
			useDefault);
	}

	@Override
	public String getNameCurrentLanguageId() {
		return _nameCurrentLanguageId;
	}

	@JSON
	@Override
	public String getNameCurrentValue() {
		Locale locale = getLocale(_nameCurrentLanguageId);

		return getName(locale);
	}

	@Override
	public Map<Locale, String> getNameMap() {
		return LocalizationUtil.getLocalizationMap(getName());
	}

	@Override
	public void setName(String name) {
		_columnBitmask = -1L;

		_name = name;
	}

	@Override
	public void setName(String name, Locale locale) {
		setName(name, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setName(String name, Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(name)) {
			setName(LocalizationUtil.updateLocalization(getName(), "Name",
					name, languageId, defaultLanguageId));
		}
		else {
			setName(LocalizationUtil.removeLocalization(getName(), "Name",
					languageId));
		}
	}

	@Override
	public void setNameCurrentLanguageId(String languageId) {
		_nameCurrentLanguageId = languageId;
	}

	@Override
	public void setNameMap(Map<Locale, String> nameMap) {
		setNameMap(nameMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setNameMap(Map<Locale, String> nameMap, Locale defaultLocale) {
		if (nameMap == null) {
			return;
		}

		setName(LocalizationUtil.updateLocalization(nameMap, getName(), "Name",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public String getDescription(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getDescription(languageId);
	}

	@Override
	public String getDescription(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getDescription(languageId, useDefault);
	}

	@Override
	public String getDescription(String languageId) {
		return LocalizationUtil.getLocalization(getDescription(), languageId);
	}

	@Override
	public String getDescription(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getDescription(), languageId,
			useDefault);
	}

	@Override
	public String getDescriptionCurrentLanguageId() {
		return _descriptionCurrentLanguageId;
	}

	@JSON
	@Override
	public String getDescriptionCurrentValue() {
		Locale locale = getLocale(_descriptionCurrentLanguageId);

		return getDescription(locale);
	}

	@Override
	public Map<Locale, String> getDescriptionMap() {
		return LocalizationUtil.getLocalizationMap(getDescription());
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@Override
	public void setDescription(String description, Locale locale) {
		setDescription(description, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setDescription(String description, Locale locale,
		Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(description)) {
			setDescription(LocalizationUtil.updateLocalization(
					getDescription(), "Description", description, languageId,
					defaultLanguageId));
		}
		else {
			setDescription(LocalizationUtil.removeLocalization(
					getDescription(), "Description", languageId));
		}
	}

	@Override
	public void setDescriptionCurrentLanguageId(String languageId) {
		_descriptionCurrentLanguageId = languageId;
	}

	@Override
	public void setDescriptionMap(Map<Locale, String> descriptionMap) {
		setDescriptionMap(descriptionMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setDescriptionMap(Map<Locale, String> descriptionMap,
		Locale defaultLocale) {
		if (descriptionMap == null) {
			return;
		}

		setDescription(LocalizationUtil.updateLocalization(descriptionMap,
				getDescription(), "Description",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@Override
	public int getAge() {
		return _age;
	}

	@Override
	public void setAge(int age) {
		_age = age;
	}

	@Override
	public int getMinParticipants() {
		return _minParticipants;
	}

	@Override
	public void setMinParticipants(int minParticipants) {
		_minParticipants = minParticipants;
	}

	@Override
	public int getMaxParticipants() {
		return _maxParticipants;
	}

	@Override
	public void setMaxParticipants(int maxParticipants) {
		_maxParticipants = maxParticipants;
	}

	@Override
	public String getUsageRules() {
		if (_usageRules == null) {
			return "";
		}
		else {
			return _usageRules;
		}
	}

	@Override
	public String getUsageRules(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getUsageRules(languageId);
	}

	@Override
	public String getUsageRules(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getUsageRules(languageId, useDefault);
	}

	@Override
	public String getUsageRules(String languageId) {
		return LocalizationUtil.getLocalization(getUsageRules(), languageId);
	}

	@Override
	public String getUsageRules(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getUsageRules(), languageId,
			useDefault);
	}

	@Override
	public String getUsageRulesCurrentLanguageId() {
		return _usageRulesCurrentLanguageId;
	}

	@JSON
	@Override
	public String getUsageRulesCurrentValue() {
		Locale locale = getLocale(_usageRulesCurrentLanguageId);

		return getUsageRules(locale);
	}

	@Override
	public Map<Locale, String> getUsageRulesMap() {
		return LocalizationUtil.getLocalizationMap(getUsageRules());
	}

	@Override
	public void setUsageRules(String usageRules) {
		_usageRules = usageRules;
	}

	@Override
	public void setUsageRules(String usageRules, Locale locale) {
		setUsageRules(usageRules, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setUsageRules(String usageRules, Locale locale,
		Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(usageRules)) {
			setUsageRules(LocalizationUtil.updateLocalization(getUsageRules(),
					"UsageRules", usageRules, languageId, defaultLanguageId));
		}
		else {
			setUsageRules(LocalizationUtil.removeLocalization(getUsageRules(),
					"UsageRules", languageId));
		}
	}

	@Override
	public void setUsageRulesCurrentLanguageId(String languageId) {
		_usageRulesCurrentLanguageId = languageId;
	}

	@Override
	public void setUsageRulesMap(Map<Locale, String> usageRulesMap) {
		setUsageRulesMap(usageRulesMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setUsageRulesMap(Map<Locale, String> usageRulesMap,
		Locale defaultLocale) {
		if (usageRulesMap == null) {
			return;
		}

		setUsageRules(LocalizationUtil.updateLocalization(usageRulesMap,
				getUsageRules(), "UsageRules",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@Override
	public String getLoanConditions() {
		if (_loanConditions == null) {
			return "";
		}
		else {
			return _loanConditions;
		}
	}

	@Override
	public String getLoanConditions(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getLoanConditions(languageId);
	}

	@Override
	public String getLoanConditions(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getLoanConditions(languageId, useDefault);
	}

	@Override
	public String getLoanConditions(String languageId) {
		return LocalizationUtil.getLocalization(getLoanConditions(), languageId);
	}

	@Override
	public String getLoanConditions(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getLoanConditions(),
			languageId, useDefault);
	}

	@Override
	public String getLoanConditionsCurrentLanguageId() {
		return _loanConditionsCurrentLanguageId;
	}

	@JSON
	@Override
	public String getLoanConditionsCurrentValue() {
		Locale locale = getLocale(_loanConditionsCurrentLanguageId);

		return getLoanConditions(locale);
	}

	@Override
	public Map<Locale, String> getLoanConditionsMap() {
		return LocalizationUtil.getLocalizationMap(getLoanConditions());
	}

	@Override
	public void setLoanConditions(String loanConditions) {
		_loanConditions = loanConditions;
	}

	@Override
	public void setLoanConditions(String loanConditions, Locale locale) {
		setLoanConditions(loanConditions, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setLoanConditions(String loanConditions, Locale locale,
		Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(loanConditions)) {
			setLoanConditions(LocalizationUtil.updateLocalization(
					getLoanConditions(), "LoanConditions", loanConditions,
					languageId, defaultLanguageId));
		}
		else {
			setLoanConditions(LocalizationUtil.removeLocalization(
					getLoanConditions(), "LoanConditions", languageId));
		}
	}

	@Override
	public void setLoanConditionsCurrentLanguageId(String languageId) {
		_loanConditionsCurrentLanguageId = languageId;
	}

	@Override
	public void setLoanConditionsMap(Map<Locale, String> loanConditionsMap) {
		setLoanConditionsMap(loanConditionsMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setLoanConditionsMap(Map<Locale, String> loanConditionsMap,
		Locale defaultLocale) {
		if (loanConditionsMap == null) {
			return;
		}

		setLoanConditions(LocalizationUtil.updateLocalization(
				loanConditionsMap, getLoanConditions(), "LoanConditions",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@Override
	public boolean getTitulationIsRequired() {
		return _titulationIsRequired;
	}

	@Override
	public boolean isTitulationIsRequired() {
		return _titulationIsRequired;
	}

	@Override
	public void setTitulationIsRequired(boolean titulationIsRequired) {
		_titulationIsRequired = titulationIsRequired;
	}

	@Override
	public int getTotalStock() {
		return _totalStock;
	}

	@Override
	public void setTotalStock(int totalStock) {
		_totalStock = totalStock;
	}

	@Override
	public int getAvailableStock() {
		return _availableStock;
	}

	@Override
	public void setAvailableStock(int availableStock) {
		_columnBitmask |= AVAILABLESTOCK_COLUMN_BITMASK;

		if (!_setOriginalAvailableStock) {
			_setOriginalAvailableStock = true;

			_originalAvailableStock = _availableStock;
		}

		_availableStock = availableStock;
	}

	public int getOriginalAvailableStock() {
		return _originalAvailableStock;
	}

	@Override
	public int getDaysBeforeLoan() {
		return _daysBeforeLoan;
	}

	@Override
	public void setDaysBeforeLoan(int daysBeforeLoan) {
		_daysBeforeLoan = daysBeforeLoan;
	}

	@Override
	public int getDaysBooking() {
		return _daysBooking;
	}

	@Override
	public void setDaysBooking(int daysBooking) {
		_daysBooking = daysBooking;
	}

	@Override
	public int getDaysAfterLoan() {
		return _daysAfterLoan;
	}

	@Override
	public void setDaysAfterLoan(int daysAfterLoan) {
		_daysAfterLoan = daysAfterLoan;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Activity.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> nameMap = getNameMap();

		for (Map.Entry<Locale, String> entry : nameMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> descriptionMap = getDescriptionMap();

		for (Map.Entry<Locale, String> entry : descriptionMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> usageRulesMap = getUsageRulesMap();

		for (Map.Entry<Locale, String> entry : usageRulesMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> loanConditionsMap = getLoanConditionsMap();

		for (Map.Entry<Locale, String> entry : loanConditionsMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getName();

		if (xml == null) {
			return "";
		}

		Locale defaultLocale = LocaleUtil.getSiteDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		Locale defaultLocale = LocaleUtil.fromLanguageId(getDefaultLanguageId());

		Locale[] availableLocales = LocaleUtil.fromLanguageIds(getAvailableLanguageIds());

		Locale defaultImportLocale = LocalizationUtil.getDefaultImportLocale(Activity.class.getName(),
				getPrimaryKey(), defaultLocale, availableLocales);

		prepareLocalizedFieldsForImport(defaultImportLocale);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {
		Locale defaultLocale = LocaleUtil.getSiteDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String name = getName(defaultLocale);

		if (Validator.isNull(name)) {
			setName(getName(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setName(getName(defaultLocale), defaultLocale, defaultLocale);
		}

		String description = getDescription(defaultLocale);

		if (Validator.isNull(description)) {
			setDescription(getDescription(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setDescription(getDescription(defaultLocale), defaultLocale,
				defaultLocale);
		}

		String usageRules = getUsageRules(defaultLocale);

		if (Validator.isNull(usageRules)) {
			setUsageRules(getUsageRules(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setUsageRules(getUsageRules(defaultLocale), defaultLocale,
				defaultLocale);
		}

		String loanConditions = getLoanConditions(defaultLocale);

		if (Validator.isNull(loanConditions)) {
			setLoanConditions(getLoanConditions(modelDefaultLanguageId),
				defaultLocale);
		}
		else {
			setLoanConditions(getLoanConditions(defaultLocale), defaultLocale,
				defaultLocale);
		}
	}

	@Override
	public Activity toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Activity)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ActivityImpl activityImpl = new ActivityImpl();

		activityImpl.setActivityId(getActivityId());
		activityImpl.setName(getName());
		activityImpl.setDescription(getDescription());
		activityImpl.setAge(getAge());
		activityImpl.setMinParticipants(getMinParticipants());
		activityImpl.setMaxParticipants(getMaxParticipants());
		activityImpl.setUsageRules(getUsageRules());
		activityImpl.setLoanConditions(getLoanConditions());
		activityImpl.setTitulationIsRequired(isTitulationIsRequired());
		activityImpl.setTotalStock(getTotalStock());
		activityImpl.setAvailableStock(getAvailableStock());
		activityImpl.setDaysBeforeLoan(getDaysBeforeLoan());
		activityImpl.setDaysBooking(getDaysBooking());
		activityImpl.setDaysAfterLoan(getDaysAfterLoan());
		activityImpl.setGroupId(getGroupId());
		activityImpl.setCompanyId(getCompanyId());
		activityImpl.setUserId(getUserId());
		activityImpl.setUserName(getUserName());
		activityImpl.setCreateDate(getCreateDate());
		activityImpl.setModifiedDate(getModifiedDate());

		activityImpl.resetOriginalValues();

		return activityImpl;
	}

	@Override
	public int compareTo(Activity activity) {
		int value = 0;

		value = getName().compareTo(activity.getName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Activity)) {
			return false;
		}

		Activity activity = (Activity)obj;

		long primaryKey = activity.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		ActivityModelImpl activityModelImpl = this;

		activityModelImpl._originalActivityId = activityModelImpl._activityId;

		activityModelImpl._setOriginalActivityId = false;

		activityModelImpl._originalAvailableStock = activityModelImpl._availableStock;

		activityModelImpl._setOriginalAvailableStock = false;

		activityModelImpl._originalGroupId = activityModelImpl._groupId;

		activityModelImpl._setOriginalGroupId = false;

		activityModelImpl._originalCompanyId = activityModelImpl._companyId;

		activityModelImpl._setOriginalCompanyId = false;

		activityModelImpl._setModifiedDate = false;

		activityModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Activity> toCacheModel() {
		ActivityCacheModel activityCacheModel = new ActivityCacheModel();

		activityCacheModel.activityId = getActivityId();

		activityCacheModel.name = getName();

		String name = activityCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			activityCacheModel.name = null;
		}

		activityCacheModel.description = getDescription();

		String description = activityCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			activityCacheModel.description = null;
		}

		activityCacheModel.age = getAge();

		activityCacheModel.minParticipants = getMinParticipants();

		activityCacheModel.maxParticipants = getMaxParticipants();

		activityCacheModel.usageRules = getUsageRules();

		String usageRules = activityCacheModel.usageRules;

		if ((usageRules != null) && (usageRules.length() == 0)) {
			activityCacheModel.usageRules = null;
		}

		activityCacheModel.loanConditions = getLoanConditions();

		String loanConditions = activityCacheModel.loanConditions;

		if ((loanConditions != null) && (loanConditions.length() == 0)) {
			activityCacheModel.loanConditions = null;
		}

		activityCacheModel.titulationIsRequired = isTitulationIsRequired();

		activityCacheModel.totalStock = getTotalStock();

		activityCacheModel.availableStock = getAvailableStock();

		activityCacheModel.daysBeforeLoan = getDaysBeforeLoan();

		activityCacheModel.daysBooking = getDaysBooking();

		activityCacheModel.daysAfterLoan = getDaysAfterLoan();

		activityCacheModel.groupId = getGroupId();

		activityCacheModel.companyId = getCompanyId();

		activityCacheModel.userId = getUserId();

		activityCacheModel.userName = getUserName();

		String userName = activityCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			activityCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			activityCacheModel.createDate = createDate.getTime();
		}
		else {
			activityCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			activityCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			activityCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return activityCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(41);

		sb.append("{activityId=");
		sb.append(getActivityId());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", age=");
		sb.append(getAge());
		sb.append(", minParticipants=");
		sb.append(getMinParticipants());
		sb.append(", maxParticipants=");
		sb.append(getMaxParticipants());
		sb.append(", usageRules=");
		sb.append(getUsageRules());
		sb.append(", loanConditions=");
		sb.append(getLoanConditions());
		sb.append(", titulationIsRequired=");
		sb.append(isTitulationIsRequired());
		sb.append(", totalStock=");
		sb.append(getTotalStock());
		sb.append(", availableStock=");
		sb.append(getAvailableStock());
		sb.append(", daysBeforeLoan=");
		sb.append(getDaysBeforeLoan());
		sb.append(", daysBooking=");
		sb.append(getDaysBooking());
		sb.append(", daysAfterLoan=");
		sb.append(getDaysAfterLoan());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(64);

		sb.append("<model><model-name>");
		sb.append("cat.diba.materialesportiu.model.Activity");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>activityId</column-name><column-value><![CDATA[");
		sb.append(getActivityId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>age</column-name><column-value><![CDATA[");
		sb.append(getAge());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>minParticipants</column-name><column-value><![CDATA[");
		sb.append(getMinParticipants());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>maxParticipants</column-name><column-value><![CDATA[");
		sb.append(getMaxParticipants());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>usageRules</column-name><column-value><![CDATA[");
		sb.append(getUsageRules());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>loanConditions</column-name><column-value><![CDATA[");
		sb.append(getLoanConditions());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>titulationIsRequired</column-name><column-value><![CDATA[");
		sb.append(isTitulationIsRequired());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>totalStock</column-name><column-value><![CDATA[");
		sb.append(getTotalStock());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>availableStock</column-name><column-value><![CDATA[");
		sb.append(getAvailableStock());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>daysBeforeLoan</column-name><column-value><![CDATA[");
		sb.append(getDaysBeforeLoan());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>daysBooking</column-name><column-value><![CDATA[");
		sb.append(getDaysBooking());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>daysAfterLoan</column-name><column-value><![CDATA[");
		sb.append(getDaysAfterLoan());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Activity.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Activity.class, ModelWrapper.class
		};
	private long _activityId;
	private long _originalActivityId;
	private boolean _setOriginalActivityId;
	private String _name;
	private String _nameCurrentLanguageId;
	private String _description;
	private String _descriptionCurrentLanguageId;
	private int _age;
	private int _minParticipants;
	private int _maxParticipants;
	private String _usageRules;
	private String _usageRulesCurrentLanguageId;
	private String _loanConditions;
	private String _loanConditionsCurrentLanguageId;
	private boolean _titulationIsRequired;
	private int _totalStock;
	private int _availableStock;
	private int _originalAvailableStock;
	private boolean _setOriginalAvailableStock;
	private int _daysBeforeLoan;
	private int _daysBooking;
	private int _daysAfterLoan;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _columnBitmask;
	private Activity _escapedModel;
}