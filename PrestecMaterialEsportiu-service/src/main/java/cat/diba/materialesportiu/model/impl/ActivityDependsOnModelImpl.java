/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package cat.diba.materialesportiu.model.impl;

import aQute.bnd.annotation.ProviderType;

import cat.diba.materialesportiu.model.ActivityDependsOn;
import cat.diba.materialesportiu.model.ActivityDependsOnModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ActivityDependsOn service. Represents a row in the &quot;PME_ActivityDependsOn&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ActivityDependsOnModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ActivityDependsOnImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ActivityDependsOnImpl
 * @see ActivityDependsOn
 * @see ActivityDependsOnModel
 * @generated
 */
@ProviderType
public class ActivityDependsOnModelImpl extends BaseModelImpl<ActivityDependsOn>
	implements ActivityDependsOnModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a activity depends on model instance should use the {@link ActivityDependsOn} interface instead.
	 */
	public static final String TABLE_NAME = "PME_ActivityDependsOn";
	public static final Object[][] TABLE_COLUMNS = {
			{ "activityDependsOnId", Types.BIGINT },
			{ "activityId", Types.BIGINT },
			{ "parentActivityId", Types.BIGINT },
			{ "quantity", Types.INTEGER },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("activityDependsOnId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("activityId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("parentActivityId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("quantity", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE = "create table PME_ActivityDependsOn (activityDependsOnId LONG not null primary key,activityId LONG,parentActivityId LONG,quantity INTEGER,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table PME_ActivityDependsOn";
	public static final String ORDER_BY_JPQL = " ORDER BY activityDependsOn.activityDependsOnId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY PME_ActivityDependsOn.activityDependsOnId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(cat.diba.materialesportiu.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.cat.diba.materialesportiu.model.ActivityDependsOn"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(cat.diba.materialesportiu.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.cat.diba.materialesportiu.model.ActivityDependsOn"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(cat.diba.materialesportiu.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.cat.diba.materialesportiu.model.ActivityDependsOn"),
			true);
	public static final long ACTIVITYID_COLUMN_BITMASK = 1L;
	public static final long COMPANYID_COLUMN_BITMASK = 2L;
	public static final long GROUPID_COLUMN_BITMASK = 4L;
	public static final long PARENTACTIVITYID_COLUMN_BITMASK = 8L;
	public static final long ACTIVITYDEPENDSONID_COLUMN_BITMASK = 16L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(cat.diba.materialesportiu.service.util.ServiceProps.get(
				"lock.expiration.time.cat.diba.materialesportiu.model.ActivityDependsOn"));

	public ActivityDependsOnModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _activityDependsOnId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setActivityDependsOnId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _activityDependsOnId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ActivityDependsOn.class;
	}

	@Override
	public String getModelClassName() {
		return ActivityDependsOn.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("activityDependsOnId", getActivityDependsOnId());
		attributes.put("activityId", getActivityId());
		attributes.put("parentActivityId", getParentActivityId());
		attributes.put("quantity", getQuantity());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long activityDependsOnId = (Long)attributes.get("activityDependsOnId");

		if (activityDependsOnId != null) {
			setActivityDependsOnId(activityDependsOnId);
		}

		Long activityId = (Long)attributes.get("activityId");

		if (activityId != null) {
			setActivityId(activityId);
		}

		Long parentActivityId = (Long)attributes.get("parentActivityId");

		if (parentActivityId != null) {
			setParentActivityId(parentActivityId);
		}

		Integer quantity = (Integer)attributes.get("quantity");

		if (quantity != null) {
			setQuantity(quantity);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}
	}

	@Override
	public long getActivityDependsOnId() {
		return _activityDependsOnId;
	}

	@Override
	public void setActivityDependsOnId(long activityDependsOnId) {
		_activityDependsOnId = activityDependsOnId;
	}

	@Override
	public long getActivityId() {
		return _activityId;
	}

	@Override
	public void setActivityId(long activityId) {
		_columnBitmask |= ACTIVITYID_COLUMN_BITMASK;

		if (!_setOriginalActivityId) {
			_setOriginalActivityId = true;

			_originalActivityId = _activityId;
		}

		_activityId = activityId;
	}

	public long getOriginalActivityId() {
		return _originalActivityId;
	}

	@Override
	public long getParentActivityId() {
		return _parentActivityId;
	}

	@Override
	public void setParentActivityId(long parentActivityId) {
		_columnBitmask |= PARENTACTIVITYID_COLUMN_BITMASK;

		if (!_setOriginalParentActivityId) {
			_setOriginalParentActivityId = true;

			_originalParentActivityId = _parentActivityId;
		}

		_parentActivityId = parentActivityId;
	}

	public long getOriginalParentActivityId() {
		return _originalParentActivityId;
	}

	@Override
	public int getQuantity() {
		return _quantity;
	}

	@Override
	public void setQuantity(int quantity) {
		_quantity = quantity;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			ActivityDependsOn.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ActivityDependsOn toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ActivityDependsOn)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ActivityDependsOnImpl activityDependsOnImpl = new ActivityDependsOnImpl();

		activityDependsOnImpl.setActivityDependsOnId(getActivityDependsOnId());
		activityDependsOnImpl.setActivityId(getActivityId());
		activityDependsOnImpl.setParentActivityId(getParentActivityId());
		activityDependsOnImpl.setQuantity(getQuantity());
		activityDependsOnImpl.setGroupId(getGroupId());
		activityDependsOnImpl.setCompanyId(getCompanyId());
		activityDependsOnImpl.setUserId(getUserId());
		activityDependsOnImpl.setUserName(getUserName());
		activityDependsOnImpl.setCreateDate(getCreateDate());
		activityDependsOnImpl.setModifiedDate(getModifiedDate());

		activityDependsOnImpl.resetOriginalValues();

		return activityDependsOnImpl;
	}

	@Override
	public int compareTo(ActivityDependsOn activityDependsOn) {
		long primaryKey = activityDependsOn.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ActivityDependsOn)) {
			return false;
		}

		ActivityDependsOn activityDependsOn = (ActivityDependsOn)obj;

		long primaryKey = activityDependsOn.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		ActivityDependsOnModelImpl activityDependsOnModelImpl = this;

		activityDependsOnModelImpl._originalActivityId = activityDependsOnModelImpl._activityId;

		activityDependsOnModelImpl._setOriginalActivityId = false;

		activityDependsOnModelImpl._originalParentActivityId = activityDependsOnModelImpl._parentActivityId;

		activityDependsOnModelImpl._setOriginalParentActivityId = false;

		activityDependsOnModelImpl._originalGroupId = activityDependsOnModelImpl._groupId;

		activityDependsOnModelImpl._setOriginalGroupId = false;

		activityDependsOnModelImpl._originalCompanyId = activityDependsOnModelImpl._companyId;

		activityDependsOnModelImpl._setOriginalCompanyId = false;

		activityDependsOnModelImpl._setModifiedDate = false;

		activityDependsOnModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ActivityDependsOn> toCacheModel() {
		ActivityDependsOnCacheModel activityDependsOnCacheModel = new ActivityDependsOnCacheModel();

		activityDependsOnCacheModel.activityDependsOnId = getActivityDependsOnId();

		activityDependsOnCacheModel.activityId = getActivityId();

		activityDependsOnCacheModel.parentActivityId = getParentActivityId();

		activityDependsOnCacheModel.quantity = getQuantity();

		activityDependsOnCacheModel.groupId = getGroupId();

		activityDependsOnCacheModel.companyId = getCompanyId();

		activityDependsOnCacheModel.userId = getUserId();

		activityDependsOnCacheModel.userName = getUserName();

		String userName = activityDependsOnCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			activityDependsOnCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			activityDependsOnCacheModel.createDate = createDate.getTime();
		}
		else {
			activityDependsOnCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			activityDependsOnCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			activityDependsOnCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return activityDependsOnCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(21);

		sb.append("{activityDependsOnId=");
		sb.append(getActivityDependsOnId());
		sb.append(", activityId=");
		sb.append(getActivityId());
		sb.append(", parentActivityId=");
		sb.append(getParentActivityId());
		sb.append(", quantity=");
		sb.append(getQuantity());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(34);

		sb.append("<model><model-name>");
		sb.append("cat.diba.materialesportiu.model.ActivityDependsOn");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>activityDependsOnId</column-name><column-value><![CDATA[");
		sb.append(getActivityDependsOnId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>activityId</column-name><column-value><![CDATA[");
		sb.append(getActivityId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>parentActivityId</column-name><column-value><![CDATA[");
		sb.append(getParentActivityId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>quantity</column-name><column-value><![CDATA[");
		sb.append(getQuantity());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = ActivityDependsOn.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			ActivityDependsOn.class, ModelWrapper.class
		};
	private long _activityDependsOnId;
	private long _activityId;
	private long _originalActivityId;
	private boolean _setOriginalActivityId;
	private long _parentActivityId;
	private long _originalParentActivityId;
	private boolean _setOriginalParentActivityId;
	private int _quantity;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _columnBitmask;
	private ActivityDependsOn _escapedModel;
}