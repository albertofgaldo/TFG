/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package cat.diba.materialesportiu.model.impl;

import aQute.bnd.annotation.ProviderType;

import cat.diba.materialesportiu.model.LoanActivity;
import cat.diba.materialesportiu.model.LoanActivityModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the LoanActivity service. Represents a row in the &quot;PME_LoanActivity&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link LoanActivityModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LoanActivityImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see LoanActivityImpl
 * @see LoanActivity
 * @see LoanActivityModel
 * @generated
 */
@ProviderType
public class LoanActivityModelImpl extends BaseModelImpl<LoanActivity>
	implements LoanActivityModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a loan activity model instance should use the {@link LoanActivity} interface instead.
	 */
	public static final String TABLE_NAME = "PME_LoanActivity";
	public static final Object[][] TABLE_COLUMNS = {
			{ "loanActivityId", Types.BIGINT },
			{ "loanId", Types.BIGINT },
			{ "activityId", Types.BIGINT },
			{ "quantity", Types.INTEGER },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("loanActivityId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("loanId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("activityId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("quantity", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE = "create table PME_LoanActivity (loanActivityId LONG not null primary key,loanId LONG,activityId LONG,quantity INTEGER,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table PME_LoanActivity";
	public static final String ORDER_BY_JPQL = " ORDER BY loanActivity.loanActivityId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY PME_LoanActivity.loanActivityId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(cat.diba.materialesportiu.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.cat.diba.materialesportiu.model.LoanActivity"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(cat.diba.materialesportiu.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.cat.diba.materialesportiu.model.LoanActivity"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(cat.diba.materialesportiu.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.cat.diba.materialesportiu.model.LoanActivity"),
			true);
	public static final long ACTIVITYID_COLUMN_BITMASK = 1L;
	public static final long COMPANYID_COLUMN_BITMASK = 2L;
	public static final long GROUPID_COLUMN_BITMASK = 4L;
	public static final long LOANID_COLUMN_BITMASK = 8L;
	public static final long LOANACTIVITYID_COLUMN_BITMASK = 16L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(cat.diba.materialesportiu.service.util.ServiceProps.get(
				"lock.expiration.time.cat.diba.materialesportiu.model.LoanActivity"));

	public LoanActivityModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _loanActivityId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setLoanActivityId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _loanActivityId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return LoanActivity.class;
	}

	@Override
	public String getModelClassName() {
		return LoanActivity.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("loanActivityId", getLoanActivityId());
		attributes.put("loanId", getLoanId());
		attributes.put("activityId", getActivityId());
		attributes.put("quantity", getQuantity());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long loanActivityId = (Long)attributes.get("loanActivityId");

		if (loanActivityId != null) {
			setLoanActivityId(loanActivityId);
		}

		Long loanId = (Long)attributes.get("loanId");

		if (loanId != null) {
			setLoanId(loanId);
		}

		Long activityId = (Long)attributes.get("activityId");

		if (activityId != null) {
			setActivityId(activityId);
		}

		Integer quantity = (Integer)attributes.get("quantity");

		if (quantity != null) {
			setQuantity(quantity);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}
	}

	@Override
	public long getLoanActivityId() {
		return _loanActivityId;
	}

	@Override
	public void setLoanActivityId(long loanActivityId) {
		_loanActivityId = loanActivityId;
	}

	@Override
	public long getLoanId() {
		return _loanId;
	}

	@Override
	public void setLoanId(long loanId) {
		_columnBitmask |= LOANID_COLUMN_BITMASK;

		if (!_setOriginalLoanId) {
			_setOriginalLoanId = true;

			_originalLoanId = _loanId;
		}

		_loanId = loanId;
	}

	public long getOriginalLoanId() {
		return _originalLoanId;
	}

	@Override
	public long getActivityId() {
		return _activityId;
	}

	@Override
	public void setActivityId(long activityId) {
		_columnBitmask |= ACTIVITYID_COLUMN_BITMASK;

		if (!_setOriginalActivityId) {
			_setOriginalActivityId = true;

			_originalActivityId = _activityId;
		}

		_activityId = activityId;
	}

	public long getOriginalActivityId() {
		return _originalActivityId;
	}

	@Override
	public int getQuantity() {
		return _quantity;
	}

	@Override
	public void setQuantity(int quantity) {
		_quantity = quantity;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			LoanActivity.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public LoanActivity toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (LoanActivity)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LoanActivityImpl loanActivityImpl = new LoanActivityImpl();

		loanActivityImpl.setLoanActivityId(getLoanActivityId());
		loanActivityImpl.setLoanId(getLoanId());
		loanActivityImpl.setActivityId(getActivityId());
		loanActivityImpl.setQuantity(getQuantity());
		loanActivityImpl.setGroupId(getGroupId());
		loanActivityImpl.setCompanyId(getCompanyId());
		loanActivityImpl.setUserId(getUserId());
		loanActivityImpl.setUserName(getUserName());
		loanActivityImpl.setCreateDate(getCreateDate());
		loanActivityImpl.setModifiedDate(getModifiedDate());

		loanActivityImpl.resetOriginalValues();

		return loanActivityImpl;
	}

	@Override
	public int compareTo(LoanActivity loanActivity) {
		long primaryKey = loanActivity.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof LoanActivity)) {
			return false;
		}

		LoanActivity loanActivity = (LoanActivity)obj;

		long primaryKey = loanActivity.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		LoanActivityModelImpl loanActivityModelImpl = this;

		loanActivityModelImpl._originalLoanId = loanActivityModelImpl._loanId;

		loanActivityModelImpl._setOriginalLoanId = false;

		loanActivityModelImpl._originalActivityId = loanActivityModelImpl._activityId;

		loanActivityModelImpl._setOriginalActivityId = false;

		loanActivityModelImpl._originalGroupId = loanActivityModelImpl._groupId;

		loanActivityModelImpl._setOriginalGroupId = false;

		loanActivityModelImpl._originalCompanyId = loanActivityModelImpl._companyId;

		loanActivityModelImpl._setOriginalCompanyId = false;

		loanActivityModelImpl._setModifiedDate = false;

		loanActivityModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<LoanActivity> toCacheModel() {
		LoanActivityCacheModel loanActivityCacheModel = new LoanActivityCacheModel();

		loanActivityCacheModel.loanActivityId = getLoanActivityId();

		loanActivityCacheModel.loanId = getLoanId();

		loanActivityCacheModel.activityId = getActivityId();

		loanActivityCacheModel.quantity = getQuantity();

		loanActivityCacheModel.groupId = getGroupId();

		loanActivityCacheModel.companyId = getCompanyId();

		loanActivityCacheModel.userId = getUserId();

		loanActivityCacheModel.userName = getUserName();

		String userName = loanActivityCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			loanActivityCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			loanActivityCacheModel.createDate = createDate.getTime();
		}
		else {
			loanActivityCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			loanActivityCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			loanActivityCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return loanActivityCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(21);

		sb.append("{loanActivityId=");
		sb.append(getLoanActivityId());
		sb.append(", loanId=");
		sb.append(getLoanId());
		sb.append(", activityId=");
		sb.append(getActivityId());
		sb.append(", quantity=");
		sb.append(getQuantity());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(34);

		sb.append("<model><model-name>");
		sb.append("cat.diba.materialesportiu.model.LoanActivity");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>loanActivityId</column-name><column-value><![CDATA[");
		sb.append(getLoanActivityId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>loanId</column-name><column-value><![CDATA[");
		sb.append(getLoanId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>activityId</column-name><column-value><![CDATA[");
		sb.append(getActivityId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>quantity</column-name><column-value><![CDATA[");
		sb.append(getQuantity());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = LoanActivity.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			LoanActivity.class, ModelWrapper.class
		};
	private long _loanActivityId;
	private long _loanId;
	private long _originalLoanId;
	private boolean _setOriginalLoanId;
	private long _activityId;
	private long _originalActivityId;
	private boolean _setOriginalActivityId;
	private int _quantity;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _columnBitmask;
	private LoanActivity _escapedModel;
}